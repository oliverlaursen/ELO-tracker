{"ast":null,"code":"const mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('Connected to MongoDB...')).catch(err => console.error('Could not connect to MongoDB...', err));\nconst matchSchema = new mongoose.Schema({\n  player1: {\n    type: String,\n    required: true\n  },\n  player2: {\n    type: String,\n    required: true\n  },\n  player1Goals: {\n    type: Number,\n    required: true\n  },\n  player2Goals: {\n    type: Number,\n    required: true\n  },\n  timestamp: {\n    type: Date,\n    required: true\n  }\n});\nconst Match = mongoose.model('Match', matchSchema);\nmodule.exports = Match;\n\n// Set up default mongoose connection\nconst mongoDB = 'mongodb://localhost:27017/myapp';\nmongoose.connect(mongoDB, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// Get the default connection\nconst db = mongoose.connection;\n\n// Bind connection to error event (to get notification of connection errors)\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\nmodule.exports = db;","map":{"version":3,"names":["mongoose","require","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","matchSchema","Schema","player1","type","String","required","player2","player1Goals","Number","player2Goals","timestamp","Date","Match","model","module","exports","mongoDB","db","connection","on","bind"],"sources":["/Users/oliverlundorff/dev/ELO-tracker/src/db.js"],"sourcesContent":["const mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB...'))\n  .catch(err => console.error('Could not connect to MongoDB...', err));\n\nconst matchSchema = new mongoose.Schema({\n    player1: { type: String, required: true },\n    player2: { type: String, required: true },\n    player1Goals: { type: Number, required: true },\n    player2Goals: { type: Number, required: true },\n    timestamp: { type: Date, required: true }\n  });\n  \nconst Match = mongoose.model('Match', matchSchema);\n  \nmodule.exports = Match;\n\n// Set up default mongoose connection\nconst mongoDB = 'mongodb://localhost:27017/myapp';\nmongoose.connect(mongoDB, { useNewUrlParser: true, useUnifiedTopology: true });\n\n// Get the default connection\nconst db = mongoose.connection;\n\n// Bind connection to error event (to get notification of connection errors)\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\n\nmodule.exports = db;\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpCD,QAAQ,CAACE,OAAO,CAAC,gCAAgC,EAAE;EAAEC,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC,CACpGC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAClDC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACI,KAAK,CAAC,iCAAiC,EAAED,GAAG,CAAC,CAAC;AAEtE,MAAME,WAAW,GAAG,IAAIX,QAAQ,CAACY,MAAM,CAAC;EACpCC,OAAO,EAAE;IAAEC,IAAI,EAAEC,MAAM;IAAEC,QAAQ,EAAE;EAAK,CAAC;EACzCC,OAAO,EAAE;IAAEH,IAAI,EAAEC,MAAM;IAAEC,QAAQ,EAAE;EAAK,CAAC;EACzCE,YAAY,EAAE;IAAEJ,IAAI,EAAEK,MAAM;IAAEH,QAAQ,EAAE;EAAK,CAAC;EAC9CI,YAAY,EAAE;IAAEN,IAAI,EAAEK,MAAM;IAAEH,QAAQ,EAAE;EAAK,CAAC;EAC9CK,SAAS,EAAE;IAAEP,IAAI,EAAEQ,IAAI;IAAEN,QAAQ,EAAE;EAAK;AAC1C,CAAC,CAAC;AAEJ,MAAMO,KAAK,GAAGvB,QAAQ,CAACwB,KAAK,CAAC,OAAO,EAAEb,WAAW,CAAC;AAElDc,MAAM,CAACC,OAAO,GAAGH,KAAK;;AAEtB;AACA,MAAMI,OAAO,GAAG,iCAAiC;AACjD3B,QAAQ,CAACE,OAAO,CAACyB,OAAO,EAAE;EAAExB,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC;;AAE9E;AACA,MAAMwB,EAAE,GAAG5B,QAAQ,CAAC6B,UAAU;;AAE9B;AACAD,EAAE,CAACE,EAAE,CAAC,OAAO,EAAExB,OAAO,CAACI,KAAK,CAACqB,IAAI,CAACzB,OAAO,EAAE,2BAA2B,CAAC,CAAC;AAExEmB,MAAM,CAACC,OAAO,GAAGE,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}